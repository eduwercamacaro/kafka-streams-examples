/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.2.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenLocal()
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.9'


    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
    implementation group: 'org.freemarker', name: 'freemarker', version: '2.3.32'

    implementation group: 'org.apache.kafka', name: 'kafka-streams', version: '4.0.13'
    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '4.0.13'
    implementation group: 'net.datafaker', name: 'datafaker', version: '2.0.1'
    implementation("io.javalin:javalin:5.6.2")
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.15.3'
}

// Apply a specific Java toolchain to ease working on different environments.
jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from('src/main/resources') {
        include 'templates/**/*.ftl'
    }
    duplicatesStrategy DuplicatesStrategy.INCLUDE
    manifest {
        attributes(
            'Main-Class': 'kafka.streams.internals.App'
        )
    }
}

application {
    mainClassName = project.hasProperty("mainClass") ? project.getProperty("mainClass") : "NULL"
}

task runApp(type: JavaExec) {
    mainClass = 'kafka.streams.internals.App'
    def configFile = project.hasProperty('config') ? project.config : 'instance1.properties'
    def port = project.hasProperty('port') ? project.port : '8080'
    args = [configFile, port]
    classpath = sourceSets.main.runtimeClasspath
}

processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", "src/main/configs"
        }
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
